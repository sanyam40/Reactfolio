--> React Hooks

(2) useEffect - It is used to manage Side effects.
any change in the state or props will cause the component to re-render. 
Example :
clicking on the button,Changes the title.
DOM Manipulation is a side effect.
or any API call is a side effect.
modifying browser history is a side effect.

jab bhi component re-render hoga toh useeffect call hoga.

// variation 1 -> for every time
useEffect(()=>{
    document.title=text;
});

// variation 2 -> for only one time
useEffect(()=>{
    console.log('useEffect');
},[])

// variation 3 -> for only one time & when dependency changes
useEffect(()=>{
    console.log('useEffect');
},[text])

// variation 4 -> to handle unmounting of a component (clean up)
useEffect(()=>{
// add event listener
console.log('listener added');
return ()=>{ // will be implmeneted first 
    // remove event listener
    console.log('listener removed');
}
},[text]);

component ke render hone ke bad kuch task karna h toh usko useeffect mai
Define karte h and uss task ko side effect(extra task) bolte h

iske 2 parameters hote h first callbackfunction and second dependency array
useeffect(-callbackfunction-,-dependencyarray-)

component mount - means component is rendered / load in DOM
component unmount - means component is removed / unload from DOM

----------------------------------------------------------------------------------------------------------------------------

--> Class based components

(1) Componentdidmount
(2) Componentdidupdate
(3) Componentwillunmount

but now we have only one useEffect hook to handle all these 3 cases.

